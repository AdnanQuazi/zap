name: deploy-slack-manifest-staging

on:
  push:
    branches:
      - staging
    paths:
      - 'apps/server/slack/manifest.template.json'
  workflow_dispatch:

jobs:
  update-slack-manifest:
    name: Update Slack Manifest
    runs-on: ubuntu-latest
    environment: staging
    permissions:
      contents: read
      actions: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Render manifest.json
        env:
          BASE_URL: ${{ secrets.BASE_URL }}
          APP_NAME: "Zap-Staging"
          COMMAND_PREFIX: "zap-staging"
        run: |
          node apps/server/scripts/generate-manifest.js

      - name: Refresh Slack Token
        id: refresh_token
        env:
          SLACK_REFRESH_TOKEN: ${{ secrets.SLACK_REFRESH_TOKEN }}
        run: |
          echo "üîÅ Refreshing Slack refresh token..."
          RESPONSE=$(curl -sS -X POST https://slack.com/api/tooling.tokens.rotate \
            -H "Content-Type: application/x-www-form-urlencoded" \
            --data-urlencode "refresh_token=$SLACK_REFRESH_TOKEN")

          echo "$RESPONSE" > slack_token_response.json

          if jq -e '.ok == true' slack_token_response.json > /dev/null; then
            NEW_REFRESH_TOKEN=$(jq -r .refresh_token slack_token_response.json)
            NEW_ACCESS_TOKEN=$(jq -r .token slack_token_response.json)
            echo "‚úÖ Slack tokens rotated"
            # Update both tokens in the job environment for subsequent steps
            echo "SLACK_REFRESH_TOKEN=$NEW_REFRESH_TOKEN" >> $GITHUB_ENV
            echo "SLACK_TOKEN=$NEW_ACCESS_TOKEN" >> $GITHUB_ENV
            echo "new_refresh_token=$NEW_REFRESH_TOKEN" >> $GITHUB_OUTPUT
          else
            echo "‚ùå Failed to rotate Slack token:"
            jq '.error' slack_token_response.json
            exit 1
          fi

      - name: Update Slack Refresh Token in Staging
        uses: actions/github-script@v6
        env:
          NEW_REFRESH_TOKEN: ${{ steps.refresh_token.outputs.new_refresh_token }}
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            try {
              const secretName = 'SLACK_REFRESH_TOKEN';
              const envName    = 'staging';
              const newValue   = process.env.NEW_REFRESH_TOKEN;

              console.log(`üîê Updating ${secretName} in ${envName} environment...`);

              // 1) Fetch the repo-level public key for encrypting environment secrets
              const { data: pubKey } = await github.rest.actions.getRepoPublicKey({
                owner: context.repo.owner,
                repo:  context.repo.repo,
              });

              // 2) Encrypt the new secret value
              const sodium = require('libsodium-wrappers');
              await sodium.ready;
              const messageBytes   = Buffer.from(newValue);
              const keyBytes       = Buffer.from(pubKey.key, 'base64');
              const encryptedBytes = sodium.crypto_box_seal(messageBytes, keyBytes);
              const encryptedValue = Buffer.from(encryptedBytes).toString('base64');

              // 3) Push the encrypted secret into the ‚Äústaging‚Äù environment
              await github.rest.actions.createOrUpdateEnvironmentSecret({
                owner: context.repo.owner,
                repo:  context.repo.repo,
                environment_name: envName,
                secret_name:      secretName,
                encrypted_value:  encryptedValue,
                key_id:           pubKey.key_id,
              });

              console.log(`‚úÖ Successfully updated ${secretName} in ${envName} environment`);
            } catch (err) {
              core.setFailed(`‚ùå Failed to update secret: ${err.message}`);
            }

      - name: Update Slack manifest
        id: update_manifest
        env:
          SLACK_TOKEN: ${{ env.SLACK_TOKEN }}
          SLACK_APP_ID: ${{ secrets.SLACK_APP_ID }}
        run: |
          echo "üì¶ Preparing to update Slack manifest..."
          MANIFEST_JSON=$(jq -c . apps/server/slack/manifest.json)

          RESPONSE=$(curl -sS -X POST https://slack.com/api/apps.manifest.update \
            -H "Authorization: Bearer $SLACK_TOKEN" \
            -H "Content-Type: application/json" \
            --data '{
              "app_id": "'"$SLACK_APP_ID"'",
              "manifest": '"$MANIFEST_JSON"'
            }')

          echo "$RESPONSE" > response.json

          if jq -e '.ok == true' response.json > /dev/null; then
            echo "‚úÖ Successfully updated Slack manifest for production"
          else
            echo "‚ùå Failed to update Slack manifest:"
            jq '.error' response.json
            exit 1
          fi
