name: deploy-slack-manifest-prod

on:
  push:
    branches:
      - main
    paths:
      - 'apps/server/slack/manifest.template.json'
  workflow_dispatch:

jobs:
  update-slack-manifest:
    name: Update Slack Manifest
    runs-on: ubuntu-latest
    environment: production
    permissions:
      contents: read
      actions: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Render manifest.json
        env:
          BASE_URL: ${{ secrets.BASE_URL }}
          APP_NAME: "Zap"
          COMMAND_PREFIX: "zap"
        run: |
          node server/scripts/generate-manifest.js

      - name: Refresh Slack Token
        id: refresh_token
        env:
          SLACK_REFRESH_TOKEN: ${{ secrets.SLACK_REFRESH_TOKEN }}
        run: |
          echo "üîÅ Refreshing Slack refresh token..."
          RESPONSE=$(curl -sS -X POST https://slack.com/api/tooling.tokens.rotate \
            -H "Content-Type: application/x-www-form-urlencoded" \
            --data-urlencode "refresh_token=$SLACK_REFRESH_TOKEN")

          echo "$RESPONSE" > slack_token_response.json

          if jq -e '.ok == true' slack_token_response.json > /dev/null; then
            NEW_REFRESH_TOKEN=$(jq -r .refresh_token slack_token_response.json)
            NEW_ACCESS_TOKEN=$(jq -r .token slack_token_response.json)
            echo "‚úÖ Slack tokens rotated"
            # Update both tokens in the job environment for subsequent steps
            echo "SLACK_REFRESH_TOKEN=$NEW_REFRESH_TOKEN" >> $GITHUB_ENV
            echo "SLACK_TOKEN=$NEW_ACCESS_TOKEN" >> $GITHUB_ENV
            echo "new_refresh_token=$NEW_REFRESH_TOKEN" >> $GITHUB_OUTPUT
          else
            echo "‚ùå Failed to rotate Slack token:"
            jq '.error' slack_token_response.json
            exit 1
          fi

      - name: Update SLACK_REFRESH_TOKEN Secret
        if: steps.refresh_token.outputs.new_refresh_token != ''
        uses: actions/github-script@v6
        env:
          NEW_REFRESH_TOKEN: ${{ steps.refresh_token.outputs.new_refresh_token }}
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const core = require('@actions/core');
            
            try {
              // Get repository details from context
              const { owner, repo } = context.repo;
              const secret_name = 'SLACK_REFRESH_TOKEN';
              const env_name = 'staging'; // Match the workflow environment
              const new_secret_value = process.env.NEW_REFRESH_TOKEN;
              
              console.log(`üîê Updating ${secret_name} in ${env_name} environment...`);
              
              // First get the public key to encrypt the secret
              const { data: pubKey } = await github.rest.actions.getRepoPublicKey({
                owner,
                repo
              });
              
              // Use sodium for encryption (which is available in the GitHub Actions environment)
              const sodium = require('libsodium-wrappers');
              await sodium.ready;
              
              // Encrypt the secret
              const messageBytes = Buffer.from(new_secret_value);
              const keyBytes = Buffer.from(pubKey.key, 'base64');
              const encryptedBytes = sodium.crypto_box_seal(messageBytes, keyBytes);
              const encrypted = Buffer.from(encryptedBytes).toString('base64');
              
              // Update the environment secret
              await github.rest.actions.createOrUpdateEnvironmentSecret({
                repository_id: context.payload.repository.id,
                environment_name: env_name,
                secret_name: secret_name,
                encrypted_value: encrypted,
                key_id: pubKey.key_id
              });
              
              console.log(`‚úÖ Successfully updated ${secret_name} in ${env_name} environment`);
            } catch (error) {
              core.setFailed(`Failed to update secret: ${error.message}`);
            }


      - name: Update Slack manifest
        id: update_manifest
        env:
          SLACK_TOKEN: ${{ env.SLACK_TOKEN }}
          SLACK_APP_ID: ${{ secrets.SLACK_APP_ID }}
        run: |
          echo "üì¶ Preparing to update Slack manifest..."
          MANIFEST_JSON=$(jq -c . apps/server/slack/manifest.json)

          RESPONSE=$(curl -sS -X POST https://slack.com/api/apps.manifest.update \
            -H "Authorization: Bearer $SLACK_TOKEN" \
            -H "Content-Type: application/json" \
            --data '{
              "app_id": "'"$SLACK_APP_ID"'",
              "manifest": '"$MANIFEST_JSON"'
            }')

          echo "$RESPONSE" > response.json

          if jq -e '.ok == true' response.json > /dev/null; then
            echo "‚úÖ Successfully updated Slack manifest for production"
          else
            echo "‚ùå Failed to update Slack manifest:"
            jq '.error' response.json
            exit 1
          fi
